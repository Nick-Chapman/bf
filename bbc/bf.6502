 OSRDCH=&FFE0: OSWRCH=&FFE3
 DIM mc% 1000: DIM mem &100
 mp=&70:ip=&72
 FOR pass%=0 TO 2 STEP 2
 P%=mc%
 [ OPT pass%
     lda #(prog MOD 256)
     sta ip
     lda #(prog DIV 256)
     sta ip+1
     lda #(mem MOD 256)
     sta mp
     lda #(mem DIV 256)
     sta mp+1
     ldy #0
     lda #0
     ldx #&FF
 .zeromem
     sta mem,X
     dex
     bne zeromem
     sta mem
     jmp fetch
 .advance
     jsr incip
 .fetch
     lda (ip),Y
     bne left
     rts
 .left
     cmp #ASC("<") : bne right
     dec mp
     jmp advance
 .right
     cmp #ASC(">") : bne plus
     inc mp
     jmp advance
 .plus
     cmp #ASC("+") : bne minus
     lda (mp),Y:clc:adc#1:sta (mp),Y
     jmp advance
 .minus
     cmp #ASC("-") : bne comma
     lda (mp),Y:sec:sbc#1:sta (mp),Y
     jmp advance
 .comma
     cmp #ASC(",") : bne dot
     jsr OSRDCH
     sta (mp),Y
     jmp advance
 .dot
     cmp #ASC(".") : bne open
     lda (mp),Y
     jsr OSWRCH

 .open
     cmp #ASC("[") : bne close
     lda (mp),Y
     bne advance
     ldx #1
 .forward
     jsr incip
     lda (ip),Y
     cmp #ASC("[") : bne forward2
     inx
     jmp forward
 .forward2
     cmp #ASC("]") : bne forward
     dex
     bne forward
     jmp advance

 .close
     cmp #ASC("]") : bne advance
     lda (mp),Y
     beq advance
     ldx #1
 .backward
     jsr decip
     lda (ip),Y
     cmp #ASC("]") : bne backward2
     inx
     jmp backward
 .backward2
     cmp #ASC("[") : bne backward
     dex
     bne backward
     jmp advance
 .incip
     inc ip
     lda ip
     bne incip2
     inc ip+1
 .incip2
     rts
 .decip
     lda ip
     bne decip2
     dec ip+1
 .decip2
     dec ip
     rts
 .prog
 EQUS ">++++++++++>+>+[[+++++[>++++++++<-]>.<++++++[>--------<-]+<<<]>.>>[[-]<[>+<-]>>[<<+>+>-]<[>+<-[>+<-[>+<-[>+<-[>+<-[>+<- [>+<-[>+<-[>+<-[>[-]>+>+<<<-[>+<-]]]]]]]]]]]+>>>]<<<]"
 EQUB 0
 .end
 ]
 NEXT pass%
 P. "assembled size=";(P%-mc%)
 P. "mem="; mem, "prog="; prog
 P. prog DIV 256, prog MOD 256
 P. end DIV 256, end MOD 256
 P. "running..."
 CALL(mc%)
 P.
 mp = ?&70 + 256 * ?&71 : ip = ?&72 + 256 * ?&73
 P. "mp= ";mp, "ip=  ";ip
